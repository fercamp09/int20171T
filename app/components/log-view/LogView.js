"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppViewModel_1 = require("../common/AppViewModel");
var color_1 = require("color");
var enums = require("ui/enums");
var label;
var shadow;
function onLayoutLoaded(args) {
    var layout = args.object;
    layout.backgroundColor = new color_1.Color('transparent');
    AppViewModel_1.appViewModel.on('propertyChange', function (args) {
        if (args.propertyName === 'debugEnabled' || args.propertyName === 'layerDetails') {
            updateLogListener(AppViewModel_1.appViewModel.layerDetails.log);
        }
    });
}
exports.onLayoutLoaded = onLayoutLoaded;
function onLoaded(args) {
    label = args.object;
    label.verticalAlignment = enums.VerticalAlignment.bottom;
}
exports.onLoaded = onLoaded;
function onShadowLoaded(args) {
    shadow = args.object;
    shadow.verticalAlignment = enums.VerticalAlignment.bottom;
    shadow.translateX = 0.5;
    shadow.translateY = 0.5;
}
exports.onShadowLoaded = onShadowLoaded;
var currentLog;
function updateLogListener(log) {
    if (log === currentLog && AppViewModel_1.appViewModel.debugEnabled)
        return;
    if (currentLog) {
        currentLog.removeEventListener("change", updateLog);
        currentLog = undefined;
    }
    if (!log || !AppViewModel_1.appViewModel.debugEnabled)
        return;
    log.addEventListener('change', updateLog);
    currentLog = log;
    updateLog();
}
function updateLog() {
    if (currentLog && currentLog.length > 0) {
        var lines = [];
        loop: for (var l = currentLog.length - 1; l >= 0; l--) {
            var log = currentLog.getItem(l);
            lines.unshift.apply(lines, log.lines);
            if (lines.length > 50)
                break loop;
        }
        label.text = lines.join('\n');
        shadow.text = label.text;
    }
    else {
        label.text = "";
        shadow.text = "";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxvZ1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx1REFBb0Q7QUFFcEQsK0JBQTRCO0FBQzVCLGdDQUFrQztBQUdsQyxJQUFJLEtBQVcsQ0FBQztBQUNoQixJQUFJLE1BQVksQ0FBQztBQUVqQix3QkFBK0IsSUFBSTtJQUMvQixJQUFNLE1BQU0sR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxhQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEQsMkJBQVksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsVUFBQyxJQUF1QjtRQUN0RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLGNBQWMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDL0UsaUJBQWlCLENBQUMsMkJBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQVRELHdDQVNDO0FBRUQsa0JBQXlCLElBQUk7SUFDekIsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEIsS0FBSyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDN0QsQ0FBQztBQUhELDRCQUdDO0FBRUQsd0JBQStCLElBQUk7SUFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsTUFBTSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7SUFDMUQsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDeEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFDNUIsQ0FBQztBQUxELHdDQUtDO0FBRUQsSUFBSSxVQUE2QyxDQUFDO0FBRWxELDJCQUEyQixHQUE0QjtJQUNuRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssVUFBVSxJQUFJLDJCQUFZLENBQUMsWUFBWSxDQUFDO1FBQUMsTUFBTSxDQUFDO0lBQzVELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDYixVQUFVLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDM0IsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsMkJBQVksQ0FBQyxZQUFZLENBQUM7UUFBQyxNQUFNLENBQUM7SUFDL0MsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLFNBQVMsRUFBRSxDQUFDO0FBQ2hCLENBQUM7QUFFRDtJQUNJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxLQUFLLEdBQVksRUFBRSxDQUFDO1FBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbEQsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxLQUFLLENBQUMsT0FBTyxPQUFiLEtBQUssRUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQzVCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO2dCQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdEMsQ0FBQztRQUNELEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Byb3BlcnR5Q2hhbmdlRGF0YX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlQXJyYXl9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZS1hcnJheSc7XHJcbmltcG9ydCB7TGFiZWx9IGZyb20gJ3VpL2xhYmVsJztcclxuaW1wb3J0IHthcHBWaWV3TW9kZWx9IGZyb20gJy4uL2NvbW1vbi9BcHBWaWV3TW9kZWwnO1xyXG5pbXBvcnQge0xvZ0l0ZW19IGZyb20gJ2FyZ29uLXdlYi12aWV3JztcclxuaW1wb3J0IHtDb2xvcn0gZnJvbSAnY29sb3InO1xyXG5pbXBvcnQgKiBhcyBlbnVtcyBmcm9tICd1aS9lbnVtcyc7XHJcbmltcG9ydCB7TGF5b3V0fSBmcm9tICd1aS9sYXlvdXRzL2xheW91dCdcclxuXHJcbmxldCBsYWJlbDpMYWJlbDtcclxubGV0IHNoYWRvdzpMYWJlbDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkxheW91dExvYWRlZChhcmdzKSB7XHJcbiAgICBjb25zdCBsYXlvdXQ6TGF5b3V0ID0gYXJncy5vYmplY3Q7XHJcbiAgICBsYXlvdXQuYmFja2dyb3VuZENvbG9yID0gbmV3IENvbG9yKCd0cmFuc3BhcmVudCcpO1xyXG4gICAgXHJcbiAgICBhcHBWaWV3TW9kZWwub24oJ3Byb3BlcnR5Q2hhbmdlJywgKGFyZ3M6UHJvcGVydHlDaGFuZ2VEYXRhKT0+e1xyXG4gICAgICAgIGlmIChhcmdzLnByb3BlcnR5TmFtZSA9PT0gJ2RlYnVnRW5hYmxlZCcgfHwgYXJncy5wcm9wZXJ0eU5hbWUgPT09ICdsYXllckRldGFpbHMnKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUxvZ0xpc3RlbmVyKGFwcFZpZXdNb2RlbC5sYXllckRldGFpbHMubG9nKTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkZWQoYXJncykge1xyXG4gICAgbGFiZWwgPSBhcmdzLm9iamVjdDtcclxuICAgIGxhYmVsLnZlcnRpY2FsQWxpZ25tZW50ID0gZW51bXMuVmVydGljYWxBbGlnbm1lbnQuYm90dG9tO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25TaGFkb3dMb2FkZWQoYXJncykge1xyXG4gICAgc2hhZG93ID0gYXJncy5vYmplY3Q7XHJcbiAgICBzaGFkb3cudmVydGljYWxBbGlnbm1lbnQgPSBlbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5ib3R0b207XHJcbiAgICBzaGFkb3cudHJhbnNsYXRlWCA9IDAuNTtcclxuICAgIHNoYWRvdy50cmFuc2xhdGVZID0gMC41O1xyXG59XHJcblxyXG5sZXQgY3VycmVudExvZzpPYnNlcnZhYmxlQXJyYXk8TG9nSXRlbT58dW5kZWZpbmVkO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlTG9nTGlzdGVuZXIobG9nOk9ic2VydmFibGVBcnJheTxMb2dJdGVtPikge1xyXG4gICAgaWYgKGxvZyA9PT0gY3VycmVudExvZyAmJiBhcHBWaWV3TW9kZWwuZGVidWdFbmFibGVkKSByZXR1cm47XHJcbiAgICBpZiAoY3VycmVudExvZykge1xyXG4gICAgICAgIGN1cnJlbnRMb2cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB1cGRhdGVMb2cpO1xyXG4gICAgICAgIGN1cnJlbnRMb2cgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoIWxvZyB8fCAhYXBwVmlld01vZGVsLmRlYnVnRW5hYmxlZCkgcmV0dXJuO1xyXG4gICAgbG9nLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZUxvZyk7XHJcbiAgICBjdXJyZW50TG9nID0gbG9nO1xyXG4gICAgdXBkYXRlTG9nKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxvZygpIHtcclxuICAgIGlmIChjdXJyZW50TG9nICYmIGN1cnJlbnRMb2cubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBsaW5lczpzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGxvb3A6IGZvciAodmFyIGwgPSBjdXJyZW50TG9nLmxlbmd0aC0xOyBsID49IDA7IGwtLSkge1xyXG4gICAgICAgICAgICB2YXIgbG9nID0gY3VycmVudExvZy5nZXRJdGVtKGwpO1xyXG4gICAgICAgICAgICBsaW5lcy51bnNoaWZ0KC4uLmxvZy5saW5lcyk7XHJcbiAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiA1MCkgYnJlYWsgbG9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFiZWwudGV4dCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xyXG4gICAgICAgIHNoYWRvdy50ZXh0ID0gbGFiZWwudGV4dDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGFiZWwudGV4dCA9IFwiXCI7XHJcbiAgICAgICAgc2hhZG93LnRleHQgPSBcIlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=