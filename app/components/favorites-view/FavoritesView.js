"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var FavoritesViewModel = (function (_super) {
    __extends(FavoritesViewModel, _super);
    function FavoritesViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.favoriteList = bookmarks_1.favoriteList;
        _this.filteredFavoriteList = bookmarks_1.filteredFavoriteList;
        _this.showFilteredResults = false;
        return _this;
    }
    return FavoritesViewModel;
}(observable_1.Observable));
exports.FavoritesViewModel = FavoritesViewModel;
exports.viewModel = new FavoritesViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    clearTimeout(tapTimerId);
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.favoriteList.indexOf(item);
    bookmarks_1.favoriteList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
var tapTimeout = 300;
var tapTimerId = -1;
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    contentView.on(gestures_1.GestureTypes.pan, function (data) {
        if (data.state === gestures_1.GestureStateTypes.began) {
            if (application.android) {
                closeAllCells(cell);
                editing = false;
                tapTimerId = setTimeout(function () {
                    panStart = contentView.translateX + data.deltaX;
                    editing = true;
                }, tapTimeout);
            }
            else {
                panStart = contentView.translateX;
                closeAllCells(cell);
                editing = true;
            }
        }
        else {
            // wait for tap timeout before handling this gesture (only on android)
            if (!editing)
                return;
        }
        contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
        if (data.state === gestures_1.GestureStateTypes.ended) {
            clearTimeout(tapTimerId);
            editing = false;
            var open = contentView.translateX < swipeLimit * 0.75;
            toggleCellSwipeState(cell, open);
        }
        else {
            deleteView.visibility = 'visible';
        }
    });
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
bookmarks_1.filterControl.on('propertyChange', function (evt) {
    exports.viewModel.set('showFilteredResults', bookmarks_1.filterControl.showFilteredResults);
});
//# sourceMappingURL=data:application/json;base64,