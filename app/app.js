"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
if (application.android) {
    application.mainModule = "entry-page";
}
else {
    application.mainModule = "main-page";
}
application.cssFile = "./app.css";
/***
 * Creates a performance.now() function
 */
if (!global.performance) {
    global.performance = {};
}
if (!global.performance.now) {
    if (application.android) {
        global.performance.now = function () {
            return java.lang.System.nanoTime() / 1000000;
        };
    }
    else if (application.ios) {
        global.performance.now = function () {
            return CACurrentMediaTime() * 1000;
        };
    }
}
var AppViewModel_1 = require("./components/common/AppViewModel");
var URI = require("urijs");
function handleOpenURL(urlString) {
    if (!urlString)
        return;
    var url = URI(urlString);
    if (url.protocol() !== "http" && url.protocol() !== "https") {
        url.protocol("https");
    }
    var urlValue = url.toString();
    console.log('Received url request: ' + urlValue);
    AppViewModel_1.appViewModel.launchedFromUrl = true;
    if (AppViewModel_1.appViewModel.currentUri === '') {
        AppViewModel_1.appViewModel.loadUrl(urlValue);
    }
    else {
        AppViewModel_1.appViewModel.openUrl(urlValue);
    }
    ;
}
var analytics = require("./components/common/analytics");
if (application.ios) {
    var MyDelegate = (function (_super) {
        __extends(MyDelegate, _super);
        function MyDelegate() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
            analytics.initAnalytics();
            return true;
        };
        MyDelegate.prototype.applicationOpenURLOptions = function (application, url, options) {
            AppViewModel_1.appViewModel.launchedFromUrl = true;
            AppViewModel_1.appViewModel.ready.then(function () {
                var urlValue = URI(url.absoluteString).query(true)['url'];
                handleOpenURL(urlValue);
            });
            return true;
        };
        return MyDelegate;
    }(UIResponder));
    MyDelegate.ObjCProtocols = [UIApplicationDelegate];
    application.ios.delegate = MyDelegate;
}
else {
    application.on(application.launchEvent, function (args) {
        var extras = args.android.getExtras();
        if (extras) {
            // TODO: enable url-launch from background state
            AppViewModel_1.appViewModel.launchedFromUrl = true;
            AppViewModel_1.appViewModel.ready.then(function () {
                var url = extras.getString('url');
                handleOpenURL(url);
            });
        }
        analytics.initAnalytics();
    });
}
application.start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTRDO0FBQzVDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFBO0FBQ3pDLENBQUM7QUFBQyxJQUFJLENBQUMsQ0FBQztJQUNKLFdBQVcsQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFBO0FBQ3hDLENBQUM7QUFDRCxXQUFXLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUVsQzs7R0FFRztBQUNILEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdEIsTUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDNUIsQ0FBQztBQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDakQsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRztZQUNyQixNQUFNLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDdkMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztBQUNMLENBQUM7QUFFRCxpRUFBZ0U7QUFDaEUsMkJBQTZCO0FBQzdCLHVCQUF1QixTQUFpQjtJQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUFDLE1BQU0sQ0FBQztJQUN2QixJQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0IsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLE1BQU0sSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMxRCxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxRQUFRLENBQUMsQ0FBQztJQUNqRCwyQkFBWSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDcEMsRUFBRSxDQUFDLENBQUMsMkJBQVksQ0FBQyxVQUFVLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQywyQkFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSiwyQkFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQUEsQ0FBQztBQUNOLENBQUM7QUFFRCx5REFBMkQ7QUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEI7UUFBeUIsOEJBQVc7UUFBcEM7O1FBY0EsQ0FBQztRQVpHLDZEQUF3QyxHQUF4QyxVQUF5QyxXQUEwQixFQUFFLGFBQWtCO1lBQ25GLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCw4Q0FBeUIsR0FBekIsVUFBMEIsV0FBMEIsRUFBRSxHQUFVLEVBQUUsT0FBWTtZQUMxRSwyQkFBWSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7WUFDcEMsMkJBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUNwQixJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUQsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0wsaUJBQUM7SUFBRCxDQUFDLEFBZEQsQ0FBeUIsV0FBVztJQUNsQix3QkFBYSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQWMxRCxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDMUMsQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ0osV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQVUsSUFBSTtRQUNsRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDVCxnREFBZ0Q7WUFDaEQsMkJBQVksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQ3BDLDJCQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDcEIsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUNELFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBwbGljYXRpb24gPSByZXF1aXJlKFwiYXBwbGljYXRpb25cIik7XHJcbmlmIChhcHBsaWNhdGlvbi5hbmRyb2lkKSB7XHJcbiAgICBhcHBsaWNhdGlvbi5tYWluTW9kdWxlID0gXCJlbnRyeS1wYWdlXCJcclxufSBlbHNlIHtcclxuICAgIGFwcGxpY2F0aW9uLm1haW5Nb2R1bGUgPSBcIm1haW4tcGFnZVwiXHJcbn1cclxuYXBwbGljYXRpb24uY3NzRmlsZSA9IFwiLi9hcHAuY3NzXCI7XHJcblxyXG4vKioqXHJcbiAqIENyZWF0ZXMgYSBwZXJmb3JtYW5jZS5ub3coKSBmdW5jdGlvblxyXG4gKi9cclxuaWYgKCFnbG9iYWwucGVyZm9ybWFuY2UpIHtcclxuICAgIGdsb2JhbC5wZXJmb3JtYW5jZSA9IHt9O1xyXG59XHJcbmlmICghZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdykge1xyXG4gICAgaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcclxuICAgICAgICBnbG9iYWwucGVyZm9ybWFuY2Uubm93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gamF2YS5sYW5nLlN5c3RlbS5uYW5vVGltZSgpIC8gMTAwMDAwMDtcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbi5pb3MpIHtcclxuICAgICAgICBnbG9iYWwucGVyZm9ybWFuY2Uubm93ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDQUN1cnJlbnRNZWRpYVRpbWUoKSAqIDEwMDA7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuaW1wb3J0IHsgYXBwVmlld01vZGVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbW1vbi9BcHBWaWV3TW9kZWwnO1xyXG5pbXBvcnQgKiBhcyBVUkkgZnJvbSAndXJpanMnO1xyXG5mdW5jdGlvbiBoYW5kbGVPcGVuVVJMKHVybFN0cmluZzogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXVybFN0cmluZykgcmV0dXJuO1xyXG4gICAgY29uc3QgdXJsID0gVVJJKHVybFN0cmluZyk7XHJcbiAgICBpZiAodXJsLnByb3RvY29sKCkgIT09IFwiaHR0cFwiICYmIHVybC5wcm90b2NvbCgpICE9PSBcImh0dHBzXCIpIHtcclxuICAgICAgICB1cmwucHJvdG9jb2woXCJodHRwc1wiKTtcclxuICAgIH1cclxuICAgIHZhciB1cmxWYWx1ZSA9IHVybC50b1N0cmluZygpO1xyXG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIHVybCByZXF1ZXN0OiAnICsgdXJsVmFsdWUpO1xyXG4gICAgYXBwVmlld01vZGVsLmxhdW5jaGVkRnJvbVVybCA9IHRydWU7XHJcbiAgICBpZiAoYXBwVmlld01vZGVsLmN1cnJlbnRVcmkgPT09ICcnKSB7XHJcbiAgICAgICAgYXBwVmlld01vZGVsLmxvYWRVcmwodXJsVmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhcHBWaWV3TW9kZWwub3BlblVybCh1cmxWYWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5pbXBvcnQgKiBhcyBhbmFseXRpY3MgZnJvbSBcIi4vY29tcG9uZW50cy9jb21tb24vYW5hbHl0aWNzXCI7XHJcbmlmIChhcHBsaWNhdGlvbi5pb3MpIHtcclxuICAgIGNsYXNzIE15RGVsZWdhdGUgZXh0ZW5kcyBVSVJlc3BvbmRlciBpbXBsZW1lbnRzIFVJQXBwbGljYXRpb25EZWxlZ2F0ZSB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBPYmpDUHJvdG9jb2xzID0gW1VJQXBwbGljYXRpb25EZWxlZ2F0ZV07XHJcbiAgICAgICAgYXBwbGljYXRpb25EaWRGaW5pc2hMYXVuY2hpbmdXaXRoT3B0aW9ucyhhcHBsaWNhdGlvbjogVUlBcHBsaWNhdGlvbiwgbGF1bmNoT3B0aW9uczogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGFuYWx5dGljcy5pbml0QW5hbHl0aWNzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcHBsaWNhdGlvbk9wZW5VUkxPcHRpb25zKGFwcGxpY2F0aW9uOiBVSUFwcGxpY2F0aW9uLCB1cmw6IE5TVVJMLCBvcHRpb25zOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgYXBwVmlld01vZGVsLmxhdW5jaGVkRnJvbVVybCA9IHRydWU7XHJcbiAgICAgICAgICAgIGFwcFZpZXdNb2RlbC5yZWFkeS50aGVuKCgpPT57XHJcbiAgICAgICAgICAgICAgICB2YXIgdXJsVmFsdWUgPSBVUkkodXJsLmFic29sdXRlU3RyaW5nKS5xdWVyeSh0cnVlKVsndXJsJ107XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVPcGVuVVJMKHVybFZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFwcGxpY2F0aW9uLmlvcy5kZWxlZ2F0ZSA9IE15RGVsZWdhdGU7XHJcbn0gZWxzZSB7XHJcbiAgICBhcHBsaWNhdGlvbi5vbihhcHBsaWNhdGlvbi5sYXVuY2hFdmVudCwgZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICB2YXIgZXh0cmFzID0gYXJncy5hbmRyb2lkLmdldEV4dHJhcygpO1xyXG4gICAgICAgIGlmIChleHRyYXMpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogZW5hYmxlIHVybC1sYXVuY2ggZnJvbSBiYWNrZ3JvdW5kIHN0YXRlXHJcbiAgICAgICAgICAgIGFwcFZpZXdNb2RlbC5sYXVuY2hlZEZyb21VcmwgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHBWaWV3TW9kZWwucmVhZHkudGhlbigoKT0+e1xyXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGV4dHJhcy5nZXRTdHJpbmcoJ3VybCcpO1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlT3BlblVSTCh1cmwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYW5hbHl0aWNzLmluaXRBbmFseXRpY3MoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5hcHBsaWNhdGlvbi5zdGFydCgpO1xyXG4iXX0=